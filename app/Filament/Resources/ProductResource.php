<?php

namespace App\Filament\Resources;


use App\Enums\ProductTypeEnum;
use App\Filament\Resources\ProductResource\Pages;
use App\Filament\Resources\ProductResource\RelationManagers;
use App\Models\Product;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Group;
use Filament\Forms\Components\MarkdownEditor;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Support\Enums\ActionSize;
use Filament\Tables;
use Filament\Tables\Actions\ActionGroup;
use Filament\Tables\Columns\IconColumn;
use Filament\Tables\Columns\ImageColumn;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Filters\TernaryFilter;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;

class ProductResource extends Resource
{
    protected static ?string $model = Product::class;

    protected static ?string $navigationIcon = 'heroicon-o-bolt';

    protected static ?int $navigationSort = 0;

    protected static ?string $recordTitleAttribute = 'name';

    public static function getNavigationBadge(): ?string
    {
        return parent::getModel()::count();
    }

    public static function getNavigationBadgeColor(): string|array|null
    {
        return parent::getNavigationBadgeColor(); // TODO: Change the autogenerated stub
    }


    public static function getGloballySearchableAttributes(): array
    {
        return ['name', 'description'];
    }

    public static function getGlobalSearchResultDetails(Model $record): array
    {
        return ['brand' => $record->brand->name];
    }

    public static function getGlobalSearchEloquentQuery(): Builder
    {
        return parent::getGlobalSearchEloquentQuery()->with('brand');
    }


    public static function getNavigationGroup(): ?string
    {
        return __('Shop');
    }

    public static function getModelLabel(): string
    {
        return __('Product');
    }

    public static function getPluralModelLabel(): string
    {
        return __('Products');
    }

    public static function form(Form $form): Form
    {

        return $form
            ->schema([
                Group::make([
                    Section::make()
                        ->schema(components: [
                            TextInput::make('name')
                                ->required()
                                ->unique(ignoreRecord: true)
                                ->live(onBlur: true)
                                ->afterStateUpdated(fn(string $operation, $state, callable $set) => $operation === 'edit' ?: $set('slug', Str::slug($state))),
                            TextInput::make('slug')
                                ->required()
                                ->disabledOn('edit')
                                ->dehydrated(fn(string $operation) => $operation === 'create')
                                ->unique(self::$model, 'slug', fn($record) => $record),
                            MarkdownEditor::make('description')
                                ->required()
                                ->columnSpanFull(),
                        ])->columns(),
                    Section::make()
                        ->schema(components: [
                            TextInput::make('sku')
                                ->required()
                                ->unique(ignoreRecord: true),
                            TextInput::make('price')
                                ->required()
                                ->numeric()
                                ->minValue(0),
                            TextInput::make('quantity')
                                ->required()
                                ->numeric()
                                ->minValue(0),
                            Select::make('type')
                                ->required()
                                ->options(ProductTypeEnum::class)
                                ->default(ProductTypeEnum::Deliverable),
                        ])->columns()]),

                Group::make([
                    Section::make(__('Status'))
                        ->schema([
                            Toggle::make('is_visible')
                                ->default(true),
                            Toggle::make('is_featured'),
                            DatePicker::make('published_at')
                                ->default(now())
                        ]),

                    Section::make(__('Image'))
                        ->schema([
                            FileUpload::make('image')
                                ->image()
                                ->imageEditor()
                                ->directory('form-attachments')
                                ->preserveFilenames()
                        ])->collapsible(),

                    Section::make(__('Association'))
                        ->schema([
                            Select::make('brand_id')
                                ->relationship('brand', 'name')
                                ->required(),

                            Select::make('categories')
                                ->multiple()
                                ->preload()
                                ->required()
                                ->relationship('categories', 'name')
                        ])
                ])
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                ImageColumn::make('image'),
                TextColumn::make('name')->searchable(),
                TextColumn::make('brand.name')->searchable()->sortable(),
                TextColumn::make('price')->sortable(),
                TextColumn::make('quantity'),
                TextColumn::make('published_at')->toggleable(),
                TextColumn::make('type')->badge(),
                IconColumn::make('is_visible')->boolean(),
                TextColumn::make('created_at')->sortable()->toggleable(isToggledHiddenByDefault: true),
                TextColumn::make('updated_at')->sortable()->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                TernaryFilter::make('is_visible')
//                    ->boolean()
                    ->trueLabel(__('Only Visible Products'))
                    ->falseLabel(__('Only Hidden Products'))
                    ->native(false)
            ])
            ->actions([
                ActionGroup::make([
                    Tables\Actions\ViewAction::make(),
                    Tables\Actions\EditAction::make(),
                    Tables\Actions\DeleteAction::make(),
                ])
                    ->icon('heroicon-m-ellipsis-vertical')
                    ->size(ActionSize::Small)
                    ->color('primary')
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index'  => Pages\ListProducts::route('/'),
            'create' => Pages\CreateProduct::route('/create'),
            'edit'   => Pages\EditProduct::route('/{record}/edit'),
        ];
    }
}
